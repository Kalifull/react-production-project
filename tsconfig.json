{
  "compilerOptions": {
    "outDir": "./dist/", // Поместить все скомпилированные файлы в данную папку, согласно их вложенности в исходниках. Если задана опция "outFile", то опция "outDir" будет проигнорирована
    "baseUrl": "./src/", // Путь до базовой папки для поиска не относительных путей до файлов
    "paths": {
      // Укажите сопоставление маршрутов для вычисления по сравнению с параметром baseUrl
      "@/shared/*": ["shared/*"],
      "@/entities/*": ["entities/*"],
      "@/features/*": ["features/*"],
      "@/widgets/*": ["widgets/*"],
      "@/pages/*": ["pages/*"],
      "@/app/*": ["app/*"]
    },
    "noImplicitAny": true, // Показывать ошибку, если где-то задан тип "any"
    "module": "ESNext", // Определяет тип импорта кода в итоговом файле, прописанном в "outFile". Необходимо задавать при использовании опции "outFile"
    "target": "es5", // Тип кода создаваемого итогового файла
    "jsx": "react-jsx", // Включать ли поддержку ".tsx" файлов
    "allowJs": true, // Разрешать компилировать файлы с JavaScript-кодом
    "moduleResolution": "node", // Определить способ поиска модулей в папках: как в Node.js или классический, как в TypeScript 1.5 и ниже
    "esModuleInterop": true, // Создать хелперы __importStar и __importDefault для обеспечения совместимости с экосистемой Babel и включить allowSyntheticDefaultImports для совместимости с системой типов
    "allowSyntheticDefaultImports": true, // Разрешить импортировать модули не имеющие внутри себя "import default"
    "plugins": [{ "name": "typescript-plugin-css-modules" }]
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "build"],
  "ts-node": {
    "compilerOptions": {
      "module": "CommonJS"
    }
  }
}
